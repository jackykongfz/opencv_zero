#include<opencv2\opencv.hpp>
#include<opencv2\core\core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<iostream>

using namespace cv;
using namespace std;

void colorReduce(Mat& inputImage, Mat& outputImage, int div);

//用指针做像素变换
void colorReduce(Mat& inputImage, Mat& outputImage, int div)
{
	//inputImage.copyTo(outputImage);
	outputImage = inputImage.clone();
	int rowNumber = outputImage.rows;
	int colNumber = outputImage.cols * outputImage.channels();//列数乘以通道数

	for (int i = 0; i < rowNumber; i++)
	{
		uchar* data = outputImage.ptr<uchar>(i);
		for (int j = 0; j < colNumber; j++)
		{
			data[j] = data[j] / div*div;
		}
	}
}

void colorReduce1(Mat& inputImage, Mat& outputImage, int div)
{
	inputImage.copyTo(outputImage);
	int rowNumber = outputImage.rows;
	int colNumber = outputImage.cols * outputImage.channels();//列数乘以通道数

	for (int i = 0; i < rowNumber; i++)
	{
		uchar* data = outputImage.ptr<uchar>(i);
		for (int j = 0; j < colNumber; j++)
		{
			data[j] = data[j] / div*div + div/2;
		}
	}
}

//动态地址计算的方法不能用，为什么？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？
void colorReducedt(Mat& inputImage, Mat& outputImage, int div)
{
	//inputImage.copyTo(outputImage);
	outputImage = inputImage.clone();
	int rowNumber = outputImage.rows;
	int colNumber = outputImage.cols;
	for (int i = 0; i < rowNumber; i++)
	{
		for (int j = 0; j < colNumber; j++)
		{
			outputImage.at<Vec3b>(i, j)[0] =
				outputImage.at<Vec3b>(i, j)[0] / div*div + div / 2;//蓝色通道
			outputImage.at<Vec3b>(i, j)[1] =
				outputImage.at<Vec3b>(i, j)[1] / div*div + div / 2;//绿色通道
			outputImage.at<Vec3b>(i, j)[2] =
				outputImage.at<Vec3b>(i, j)[3] / div*div + div / 2;//红色通道
		}
	}
}

int main()
{
	Mat srcImage = imread("1.jpg",0);
	imshow("原始图像", srcImage);

	Mat dstImage;
	srcImage.copyTo(dstImage);
	//dstImage.create(srcImage.rows, srcImage.cols, srcImage.type());

	colorReduce(dstImage, dstImage, 32);

	double time0 = static_cast<double>(getTickCount());
	time0 = ((double)getTickCount() - time0) / getTickFrequency();

	cout << "此方法运行时间" << time0 << endl;

	imshow("效果图1", dstImage);

	colorReduce1(srcImage, srcImage,32);
	imshow("效果图2", srcImage);
	
	waitKey(0);
}
