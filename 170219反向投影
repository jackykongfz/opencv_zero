#include<opencv2/opencv.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/highgui/highgui.hpp>

using namespace cv;
using namespace std;

Mat g_srcImage, g_hsvImage, g_hueImage;
int g_bins = 30;
static void on_BinChange(int, void*);

int main()
{
	//读入图片
	g_srcImage = imread("WIN_20170219_21_53_33_Pro.jpg");
	if (!g_srcImage.data){ printf("imread failed"); };

	//转换到hsv
	cvtColor(g_srcImage, g_hsvImage, COLOR_BGR2HSV);

	//分离Hue色调通道
	g_hueImage.create(g_hsvImage.size(), g_hsvImage.depth());
	int ch[] = { 0, 0 };                                        //from_to 参数，从0到0通道
	mixChannels(&g_hsvImage, 1, &g_hueImage, 1, ch, 1);

	//创建Trackbar
	namedWindow("原始图", WINDOW_AUTOSIZE);
	createTrackbar("色调组矩", "原始图", &g_bins, 180, on_BinChange);
	on_BinChange(g_bins, 0);

	//显示原始图
	imshow("原始图", g_srcImage);
	
	waitKey(0);
	return 0;
}

void on_BinChange(int, void*)
{
	//参数准备
	MatND hist;
	int histSize = MAX(g_bins, 2);
	float hue_range[] = { 0, 180 };
	const float* ranges = { hue_range };

	//计算直方图并归一化
	calcHist(&g_hueImage, 1, 0, Mat(), hist, 1, &histSize, &ranges);
	normalize(hist, hist, 0, 255, NORM_MINMAX, -1, Mat());

	//计算反向投影
	MatND backproj;
	calcBackProject(&g_hueImage, 1, 0, hist, backproj, &ranges);

	imshow("反向投影", backproj);

	//绘制直方图的参数准备
	int w = 400; int h = 400;
	int bin_w = cvRound((double)w / histSize);
	Mat histImg = Mat::zeros(w, h, CV_8UC3);

	//绘制直方图
	for (int i = 0; i < g_bins; i++)
	{
		float binValue =cvRound( hist.at<float>(i)*h/255.0);
		rectangle(histImg, Point(i*bin_w, h), Point((i + 1)*bin_w, h - binValue), Scalar(100, 123, 255),-1);
	}

	imshow("直方图", histImg);
}
