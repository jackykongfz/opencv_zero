#include<iostream>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/highgui/highgui.hpp>

using namespace std;
using namespace cv;

Mat srcImage, grayImage, dstImage;
int g_thesoldValue = 100;
int g_thesoldMax = 254;
RNG rng(12345);

static void on_Contours(int, void*);

int main()
{
	srcImage = imread("11.11.jpg");
	if (!srcImage.data){ printf("imread failed"); };

	cvtColor(srcImage, grayImage, COLOR_BGR2GRAY);
	blur(grayImage, grayImage, Size(3, 3));

	namedWindow("原始图", WINDOW_AUTOSIZE);
	namedWindow("效果图", WINDOW_AUTOSIZE);
	imshow("原始图", srcImage);

	createTrackbar("阈值", "原始图", &g_thesoldValue, g_thesoldMax, on_Contours);
	on_Contours(g_thesoldValue, 0);

	waitKey(0);
	return 0;
}

void on_Contours(int, void*)
{
	Mat output;
	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;

	threshold(grayImage, output, g_thesoldValue, 255, THRESH_BINARY);

	findContours(output, contours, hierarchy, RETR_CCOMP, CHAIN_APPROX_SIMPLE);

	//多边形逼近轮廓+获取矩形和圆形边界框
	vector<vector<Point>> contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	vector<float> radius(contours.size());
	vector<Point2f> center(contours.size());

	for (int i = 0; i < contours.size(); i++)
	{
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		//用指定精度逼近多边形曲线

		boundRect[i] = boundingRect(Mat(contours_poly[i]));
		//计算点集的最外面矩形边界

		minEnclosingCircle(contours_poly[i], center[i], radius[i]);
	}

	//绘制多边形轮廓和矩形和圆形
	Mat drawing = Mat::zeros(srcImage.size(), CV_8UC3);
	for (int i = 0; i < contours.size(); i++)
	{
		Scalar color = Scalar(rand() & 255, rand() & 255, rand() & 255);
		drawContours(drawing, contours_poly, i, color, 1, 8, vector<Vec4i>(), 0, Point());
		rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
		circle(drawing, center[i], (int)radius[i], color, 2, 8, 0);
	}
	imshow("效果图", drawing);
}
