#include<opencv2/opencv.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<opencv2/imgproc/imgproc.hpp>

using namespace cv;
using namespace std;

int main()
{
	Mat srcImage, hsvImage;
	Mat srcImage1, hsvImage1;
	Mat srcImage2, hsvImage2;
	Mat hsvImage_halfDown;

	//载入图像
	srcImage = imread("WIN_20170209_14_40_56_Pro.jpg");
	srcImage1 = imread("WIN_20170209_14_41_03_Pro.jpg");
	srcImage2 = imread("WIN_20170209_14_41_07_Pro.jpg");
/*	srcImage = imread("1.jpg");
	srcImage1 = imread("2.jpg");
	srcImage2 = imread("3.jpg");*/

	//显示载入的三张图像
	imshow("1", srcImage);
	imshow("2", srcImage1);
	imshow("3", srcImage2);

	//将图像转为hsv格式
	cvtColor(srcImage, hsvImage, COLOR_BGR2HSV);
	cvtColor(srcImage1, hsvImage1, COLOR_BGR2HSV);
	cvtColor(srcImage2, hsvImage2, COLOR_BGR2HSV);
	
	//创建包含基准图像下半部的半身图像（HSV格式）
	hsvImage_halfDown = hsvImage(Range(hsvImage.rows / 2, hsvImage.rows - 1), Range(0, hsvImage.cols - 1));

	//初始化计算直方图需要的实参
	//对hue通道使用30个bin，对saturatoin通道使用32个bin
	int h_bins = 50;
	int s_bins = 60;
	int hist_Size[] = { h_bins, s_bins };
	//hue的取值从0-256，saturatoin取值0-180
	float h_range[] = { 0, 256 };
	float s_range[] = { 0, 180 };
	const float *ranges[] = { h_range, s_range };
	//使用01通道
	int channels[] = { 0, 1 };

	//创建存储直方图的MatND类的实例
	MatND baseHist, halfDownHist, testHist1, testHist2;

	//计算基准图像，两张测试图像，半身基准图像的HSV直方图
	calcHist(&hsvImage, 1, channels, Mat(), baseHist, 2, hist_Size, ranges);
	normalize(baseHist, baseHist, 0, 1, NORM_MINMAX, -1, Mat());

	calcHist(&hsvImage_halfDown, 1, channels, Mat(), halfDownHist, 2, hist_Size, ranges);
	normalize(halfDownHist, halfDownHist, 0, 1, NORM_MINMAX, -1, Mat());

	calcHist(&hsvImage1, 1, channels, Mat(), testHist1, 2, hist_Size, ranges);
	normalize(testHist1, testHist1, 0, 1, NORM_MINMAX, -1, Mat());

	calcHist(&hsvImage2, 1, channels, Mat(), testHist2, 2, hist_Size, ranges);
	normalize(testHist2, testHist2, 0, 1, NORM_MINMAX, -1, Mat());

	//按顺序使用四种对比标准将基准图像的直方图与其余各直方图进行对比
	for (int i = 0; i < 4; i++)
	{
		int compare_method = i;
		double base_base = compareHist(baseHist, baseHist, compare_method);
		double base_half = compareHist(baseHist, halfDownHist, compare_method);
		double base_test1 = compareHist(baseHist, testHist1, compare_method);
		double base_test2 = compareHist(baseHist, testHist2, compare_method);

		//输出结果
		printf("方法【%d】的匹配结果如下：\n\n【基准图-基准图】：%f，\n【基准图-半身图】：%f，\n【基准图-测试图1】：%f，\n【基准图-测试图2】：%f \n", 
			i,base_base, base_half, base_test1, base_test2);
	}
	printf("检测结束");
	waitKey(0);
	return 0;
}
