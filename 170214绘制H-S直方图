#include<opencv2/opencv.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<opencv2/highgui/highgui.hpp>
#include<iostream>

using namespace std;
using namespace cv;

int main()
{
	Mat srcImage, hsvImage;
	srcImage = imread("1.jpg");
	cvtColor(srcImage, hsvImage, COLOR_BGR2HSV);
	 
	//参数准备，将色调量化为30个等级，将饱和度量化为32个等级
	int hueBinNum = 90;//色调的直方图直条数量
	int saturationBinNum = 80;//饱和度的直方图直条数量
	int histSize[] = { hueBinNum, saturationBinNum };
	//定义色调的变换范围为0到179
	float hueRanges[] = { 0, 180 };
	//定义饱和度的变化范围为0到255
	float saturationRanges[] = { 0, 256 };
	const float* ranges[] = { hueRanges, saturationRanges };
	Mat dstHist;
	//参数准备，calcHist 函数中将计算第0通道和第一通道的直方图
	int channels[] = { 0, 1 };

	//正式调用calcHist,进行直方图计算
	calcHist(&hsvImage,//输入的数组
		1,//输入的数组为一个
		channels,//通道索引
		Mat(),//不使用掩膜
		dstHist,//输出的目标直方图
		2,//需要计算的直方图的维度为2
		histSize,//存放每个维度的直方图尺寸的数组
		ranges,//每一维数值的取值范围数组
		true,//指示直方图是否均匀的标识符，TRUE表示均匀的直方图
		false);//累计标识符，false表示直方图在配置阶段会被清零

	//为直方图准备参数
	double maxValue = 0;//最大值
	minMaxLoc(dstHist, 0, &maxValue, 0, 0);//查找数组和子数组的全局最小值和最大值存入maxValue

	Mat histImg = Mat::zeros(saturationBinNum*10, hueBinNum * 10, CV_8UC3);

	//双重循环，进行直方图绘制
	for (int hue = 0; hue < hueBinNum; hue++)
	{
		for (int saturation = 0; saturation < saturationBinNum; saturation++)
		{
			float binValue = dstHist.at<float>(hue, saturation);//直方图直条的值

			int intensity = cvRound(binValue * 255 / maxValue);//强度

			//正式绘制
			rectangle(histImg, Point(hue*10, saturation*10), Point((hue + 1)*10 - 1, (saturation + 1)*10 - 1), Scalar::all(intensity), FILLED);
		}
	}
	imshow("效果图", histImg);
	imshow("原始图", srcImage);
	waitKey(0);
}
